{"version":3,"sources":["Components/CityComponent.js","Components/WeatherComponent.js","App.js","reportWebVitals.js","index.js"],"names":["WeatherLogo","styled","img","ChooseCityLabel","span","SearchBox","form","CityComponent","props","updateCity","fetchWeather","src","onSubmit","placeholder","onChange","e","target","value","type","WeatherInfoIcons","sunset","sunrise","humidity","wind","pressure","WeatherIcons","WeatherCondition","div","Condition","Location","LocationInfoLabel","WeatherInfoContainer","InfoContainer","InfoIcon","InfoLabel","WeatherInfoComponent","name","WeatherComponent","timeStamp","weather","isDay","icon","includes","Math","floor","main","temp","description","sys","country","Date","getHours","getMinutes","speed","Container","AppLabel","App","useState","city","updateWeather","a","preventDefault","axios","get","responce","data","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c2537c44.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst WeatherLogo = styled.img`\r\n    width: 8.75rem;\r\n    height: 8.75rem;\r\n    margin: 2.5rem auto;\r\n`;\r\n\r\nconst ChooseCityLabel = styled.span`\r\n    color: black;\r\n    font-size: 1.125 rem;\r\n    font-weight: bold;\r\n    margin: 0.625rem auto;\r\n`\r\nconst SearchBox = styled.form`\r\n    display: flex;\r\n    flex-direction: row;\r\n    border: black solid 0.063rem;\r\n    border-radius: 0.125rem;\r\n    color: black;\r\n    margin: 1.25rem auto;\r\n\r\n    & input {\r\n        padding: 0.625rem;\r\n        font-size: 0.875rem;\r\n        border: none;\r\n        outline: none;\r\n        font-weight: bold;\r\n    }\r\n    & button {\r\n        padding: 0.625rem;\r\n        font-size: 0.875rem;\r\n        color: white;\r\n        background-color: black;\r\n        border: none;\r\n        outline: none;\r\n        font-weight: bold;\r\n        cursor: pointer;\r\n    }\r\n\r\n`\r\n\r\nconst CityComponent = (props) => {\r\n    const {updateCity , fetchWeather } = props;\r\n    return (\r\n        <>\r\n          <WeatherLogo src=\"perfect-day.svg\" />\r\n          <ChooseCityLabel>Find Weather of your city</ChooseCityLabel>\r\n          <SearchBox onSubmit={fetchWeather}>\r\n                <input placeholder=\"City\" onChange={(e)=>updateCity(e.target.value)} />\r\n                <button type=\"submit\">Search</button>\r\n          </SearchBox> \r\n        </>\r\n    )\r\n}\r\n\r\nexport default CityComponent\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const WeatherInfoIcons = {\r\n  sunset: \"temp.svg\",\r\n  sunrise: \"temp.svg\",\r\n  humidity: \"humidity.svg\",\r\n  wind: \"wind.svg\",\r\n  pressure: \"pressure.svg\",\r\n};\r\n\r\nconst WeatherIcons = {\r\n  \"01d\": \"sunny.svg\",\r\n  \"01n\": \"night.svg\",\r\n  \"02d\": \"day.svg\",\r\n  \"02n\": \"cloudy-night.svg\",\r\n  \"03d\": \"cloudy.svg\",\r\n  \"03n\": \"cloudy.svg\",\r\n  \"04d\": \"perfect-day.svg\",\r\n  \"04n\": \"cloudy-night.svg\",\r\n  \"09d\": \"rain.svg\",\r\n  \"09n\": \"rain-night.svg\",\r\n  \"10d\": \"rain.svg\",\r\n  \"10n\": \"rain-night.svg\",\r\n  \"11d\": \"storm.svg\",\r\n  \"11n\": \"storm.svg\",\r\n};\r\n\r\nconst WeatherCondition = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  width: 100%;\r\n  justify-content: space-between;\r\n  margin: 1.875rem auto;\r\n`;\r\n\r\nconst Condition = styled.span`\r\n  margin: 1.25rem auto;\r\n  font-size: 0.875rem;\r\n  & span {\r\n    font-size: 1.75rem;\r\n  }\r\n`;\r\nconst WeatherLogo = styled.img`\r\n  width: 6.25rem;\r\n  height: 6.25rem;\r\n  margin: 0.313rem auto;\r\n`;\r\n\r\nconst Location = styled.span`\r\n  font-size: 1.75rem;\r\n  font-weight: bold;\r\n`;\r\n\r\nconst LocationInfoLabel = styled.span`\r\n  font-size: 0.875rem;\r\n  font-weight: bold;\r\n  margin: 1.25rem 1.563rem 0.625rem;\r\n  text-align: start;\r\n  width: 90%;\r\n`;\r\nconst WeatherInfoContainer = styled.div`\r\n  display: flex;\r\n  width: 90%;\r\n  flex-direction: row;\r\n  justify-content: space-evenly;\r\n  align-items: center;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nconst InfoContainer = styled.div`\r\n  display: flex;\r\n  margin: 5px 10px;\r\n  flex-direction: row;\r\n  justify-content: space-evenly;\r\n  align-items: center;\r\n`;\r\nconst InfoIcon = styled.img`\r\n  width: 36px;\r\n  height: 36px;\r\n`;\r\nconst InfoLabel = styled.span`\r\n  display: flex;\r\n  flex-direction: column;\r\n  font-size: 14px;\r\n  margin: 15px;\r\n  & span {\r\n    font-size: 12px;\r\n    text-transform: capitalize;\r\n  }\r\n`;\r\n\r\nconst WeatherInfoComponent = (props) => {\r\n  const { name, value } = props;\r\n  return (\r\n    <InfoContainer>\r\n      <InfoIcon src={WeatherInfoIcons[name]} />\r\n      <InfoLabel>\r\n        {value}\r\n        <span>{name}</span>\r\n      </InfoLabel>\r\n    </InfoContainer>\r\n  );\r\n};\r\n\r\nconst WeatherComponent = (props) => {\r\n  const { weather } = props;\r\n  const isDay = weather?.weather[0].icon?.includes(\"d\");\r\n  const getTime = (timeStamp) => {\r\n    return `${new Date(timeStamp * 1000).getHours()} : ${new Date(\r\n      timeStamp * 1000\r\n    ).getMinutes()}`;\r\n  };\r\n  return (\r\n    <>\r\n      <WeatherCondition>\r\n        <Condition>\r\n          <span>{`${Math.floor(weather?.main?.temp - 273)}Â°C`}</span>{\" \"}\r\n          {`| ${weather?.weather[0].description}`}\r\n        </Condition>\r\n        <WeatherLogo src={WeatherIcons[weather?.weather[0].icon]} />\r\n      </WeatherCondition>\r\n      <Location>{`${weather?.name}, ${weather?.sys?.country}`}</Location>\r\n      <LocationInfoLabel>Weather Info</LocationInfoLabel>\r\n      <WeatherInfoContainer>\r\n        <WeatherInfoComponent\r\n          name={isDay ? \"sunset\" : \"sunrise\"}\r\n          value={`${getTime(weather?.sys[isDay ? \"sunset\" : \"sunrise\"])}`}\r\n        />\r\n        <WeatherInfoComponent name=\"humidity\" value={weather?.main?.humidity} />\r\n        <WeatherInfoComponent name=\"wind\" value={weather?.wind?.speed} />\r\n        <WeatherInfoComponent name=\"pressure\" value={weather?.main?.pressure} />\r\n      </WeatherInfoContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WeatherComponent;\r\n","import styled from \"styled-components\";\nimport CityComponent from \"./Components/CityComponent\";\nimport WeatherComponent from \"./Components/WeatherComponent\";\nimport axios from \"axios\";\nimport React , { useState } from \"react\";\n\nconst API_KEY = \"9eb7cae396eb379b946e65a2cccf18ac\"\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: auto;\n  align-items: center;\n  box-shadow: 0 0.188rem 0.375rem 0 #555;     \n  padding: 1.25rem 0.625rem;\n  border-radius: 0.25px;    /*Box Redius*/\n  width: 23.75rem;   /*Box width*/\n  background: white;\n  font-family: Montserrat;\n`;\n\nconst AppLabel = styled.span`\n  color: black;\n  font-size: 1.125rem;\n  font-weight: bold;\n`;\n\n\nfunction App() {\n  const [city,updateCity] = useState()\n  const [weather, updateWeather] = useState()\n\n  const fetchWeather = async (e)=>{\n    e.preventDefault();\n     const responce =await axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}`);\n     updateWeather(responce.data)\n  };\n\n  return (\n    <Container>\n      <AppLabel>React Weather App</AppLabel>\n      {weather? <WeatherComponent weather={weather} /> : <CityComponent updateCity={updateCity} fetchWeather={fetchWeather} /> }\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}